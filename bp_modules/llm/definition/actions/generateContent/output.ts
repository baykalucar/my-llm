/* eslint-disable */
/* tslint:disable */
// This file is generated. Do not edit it manually.

import { z } from "@botpress/sdk";
export const output = {
  schema: z.object({
    id: /** Response ID from LLM provider */ z.string(),
    provider: /** LLM provider name */ z.string(),
    model: /** Model name */ z.string(),
    choices: z.array(
      z.object({
        type: z
          .enum(["text", "tool_calls", "tool_result", "multipart"])
          .default("text"),
        toolCalls: /** Required if `type` is "tool_calls" */ z.optional(
          z.array(
            z.object({
              id: z.string(),
              type: z.literal("function"),
              function: z.object({
                name: z.string(),
                arguments:
                  /** Some LLMs may generate invalid JSON for a tool call, so this will be `null` when it happens. */ z.union(
                    [z.record(z.string(), z.any()), z.null()]
                  ),
              }),
            })
          )
        ),
        toolResultCallId: /** Required if `type` is "tool_result" */ z.optional(
          /** Required if `type` is "tool_result" */ z.string()
        ),
        content:
          /** Required unless `type` is "tool_call". If `type` is "multipart", this field must be an array of content objects. If `type` is "tool_result" then this field should be the result of the tool call (a plain string or a JSON-encoded array or object). If `type` is "tool_call" then the `toolCalls` field should be used instead. */ z.union(
            [
              z.union([
                z.string(),
                z.array(
                  z.object({
                    type: z.enum(["text", "image"]),
                    mimeType:
                      /** Indicates the MIME type of the content. If not provided it will be detected from the content-type header of the provided URL. */ z.optional(
                        /** Indicates the MIME type of the content. If not provided it will be detected from the content-type header of the provided URL. */ z.string()
                      ),
                    text: /** Required if part type is "text"  */ z.optional(
                      /** Required if part type is "text"  */ z.string()
                    ),
                    url: /** Required if part type is "image" */ z.optional(
                      /** Required if part type is "image" */ z.string()
                    ),
                  })
                ),
              ]),
              z.null(),
            ]
          ),
        role: z.literal("assistant"),
        index: z.number(),
        stopReason: z.enum([
          "stop",
          "max_tokens",
          "tool_calls",
          "content_filter",
          "other",
        ]),
      })
    ),
    usage: z.object({
      inputTokens: /** Number of input tokens used by the model */ z.number(),
      inputCost:
        /** Cost of the input tokens received by the model, in U.S. dollars */ z.number(),
      outputTokens: /** Number of output tokens used by the model */ z.number(),
      outputCost:
        /** Cost of the output tokens generated by the model, in U.S. dollars */ z.number(),
    }),
    botpress: z.object({
      cost: /** Total cost of the content generation, in U.S. dollars */ z.number(),
    }),
  }),
};
